buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

// 子模块通用配置
subprojects {

    apply plugin: "java"
    apply plugin: "maven"
    // apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"

    ext {
        compileJava.options.encoding = "UTF-8"
        compileTestJava.options.encoding = "UTF-8"
    }
    group "com.shiyajian"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/release" }
        // https://jfrog.com/knowledge-base/why-should-i-use-jcenter-over-maven-central/
        jcenter() //文章中写 jcenter 优于 mavenCentral()，实际好像并不是
        mavenCentral()
    }

    dependencyManagement {
        imports {
            // @see {https://github.com/spring-cloud/spring-cloud-release/blob/master/spring-cloud-dependencies/pom.xml}
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            // @see {https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/pom.xml}
            // or @see {https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#appendix-dependency-versions}
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }
    }
    dependencies{
        implementation ( "org.projectlombok:lombok")
        compileOnly(
                "com.google.code.findbugs:jsr305:$findbugsVersion",
                "javax.servlet:javax.servlet-api",
                "org.springframework.boot:spring-boot-devtools"
        )
        annotationProcessor 'org.projectlombok:lombok'
    }

    if (it.name.contains('api')) {
        apply from: rootDir.absolutePath + "/script/api.gradle"
    }

    if (it.name.contains('client')) {
        apply from: rootDir.absolutePath + "/script/client.gradle"
    }

    if (it.name.contains('server')) {
        apply from: rootDir.absolutePath + "/script/server.gradle"
    }

    if(it.name.contains('starter')){
        apply from: rootDir.absolutePath + "/script/starter.gradle"
    }

    // 全局web容器由`undertow`替换成`tomcat`
    // configurations.all {
    //     exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    // }

    // 继承自dependencyManagement的jar包，原则上不应该去修改版本，因为每个版本都是spring经过权衡和测试的
    // 继承的jar如果版本有问题，可以采用下面这种方式修改版本
    // ext["lombok.version"] = "$lombokVersion"
}
